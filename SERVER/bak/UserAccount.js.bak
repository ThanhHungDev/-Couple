const mongoose = require('mongoose');
const PhoneSchema = require("./Schema/Phone")
const Schema = mongoose.Schema;

const User = new Schema({
    // name field
    name: {
        type: String,
        // custom validation for name
        validate: {
          validator: function(value) {
              return value.length >= 3;
          },
          message: 'Name must have at least 3 characters'
        },
        required: [true, 'Name is required']
    },
    

    // email field
    email: { 
        type: String,
        required: true,
        // email cannot be duplicated
        index: { 
            unique: [true, 'Email is existed'], 
        },
        lowercase: true,
        validate: {
            validator: function(value) {
                var pattern = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return pattern.test(value);
            },
            message: '{VALUE} is not a valid email'
        }
    },
    // password field
    password: {
        type: String,
        // custom validation for password
        validate: {
          validator: function(value) {
              return value.length >= 6;
          },
          message: 'Password must have at least 6 characters'
        },
        required: [true, 'Password is required']
    },
    // list of phone numbers
    telefones: {
        type: [ PhoneSchema ],
        default : null
    },
    user_type: {
        type: String,
        enum: ['User', 'Admin'],
    },
    data_criacao: {
        type: Number 
    },
    data_atualizacao: { 
        type: Number 
    },
    ultimo_login: { 
        type: Number 
    },
    token: { 
        type: String 
    }
});

User.pre('save', function (next) {
  this.log('saving user...');
  next();
});

User.post('save', function (doc) {
  this.log('user saved!');
});

User.method('log', function(message) {
    console.log('log: ' + message);
});

module.exports = mongoose.model('User', User);


var jamieAuthor = new Author {
    _id: new mongoose.Types.ObjectId(),
    name: {
       firstName: 'Jamie',
       lastName: 'Munro'
    },
    biography: 'Jamie is the author of ASP.NET MVC 5 with Bootstrap and Knockout.js.',
    twitter: 'https://twitter.com/endyourif',
    facebook: 'https://www.facebook.com/End-Your-If-194251957252562/'
};
 
jamieAuthor.save(function(err) {
   if (err) throw err;
    
   console.log('Author successfully saved.');
    
   var mvcBook = new Book {
            _id: new mongoose.Types.ObjectId(),
            title: 'ASP.NET MVC 5 with Bootstrap and Knockout.js',
            author: jamieAuthor._id,
            ratings:[{
               summary: 'Great read'
            }]
   };
    
   mvcBook.save(function(err) {
       if (err) throw err;
    
       console.log('Book successfully saved.');
   });
    
   var knockoutBook = new Book {
            _id: new mongoose.Types.ObjectId(),
            title: 'Knockout.js: Building Dynamic Client-Side Web Applications',
            author: jamieAuthor._id
   };
    
   knockoutBook.save(function(err) {
       if (err) throw err;
    
       console.log('Book successfully saved.');
   });
});